import pymoos
import utils
import AllocationControl

# Class to handle MOOS communication and hold available vehicles and survey area.
class MOOSHandler:

    def __init__(self, host, port, client_name):
        self.comms = pymoos.comms()
        self.host = host
        self.port = port
        self.client_name = client_name
        self.survey_area = None  # Will be set by MOOSMsg sent by user
        self.survey_area_land = None     # Will be set by MOOSMsg sent by user
        self.available_vehicles = {}     # Will be generated by NODE_REPORTs sent by vehicles

    # Start connection to MOOSDB and set callback
    def connect(self):
        self.comms.set_on_connect_callback(self.__on_connect)
        self.comms.run(self.host, self.port, self.client_name)

    # Runs after connection
    def __on_connect(self):
        self.register_variables()
        return True

    # Register for necessary variables
    def register_variables(self):
        self.comms.register("NODE_REPORT")
        self.comms.register("SURVEY_AREA")

    def fetch_messages(self):
        # Will return a list of MOOS msg
        return self.comms.fetch()

    def notify(self, variable, value):
        # Send a message to MOOSDB
        self.comms.notify(variable, value, pymoos.time())

    # Input:
    #   A list of MOOS msgs. Usually produced by a fetch.
    #   List of available vehicles.
    #   Survey area
    # Output:
    #   Returns survey area
    #   Adds new vehicles to available vehicles based on NODE_REPORT
    def parse_incoming_messages(self, messages):

        for msg in messages:
            if msg.key() == "NODE_REPORT":
                vehicle = utils.parseNodeReportAndCreateVehicle(msg.string())
                if vehicle and vehicle.name not in self.available_vehicles:
                    self.available_vehicles[vehicle.name] = vehicle
                    print("Updated vehicles:", self.available_vehicles)

            elif msg.key() == 'SURVEY_AREA':
                self.survey_area = utils.parseSurveyAreaAndCreateObject(msg.string())

    def assign_and_notify(self):
        """
        Assign tasks to vehicles and send notifications to MOOS.

        Args:
            available_vehicles (dict): Dictionary of vehicles.
            survey_area (object): Survey area object.
            moos_handler (MOOSHandler): MOOS communication handler.
        """
        print(f"{len(self.available_vehicles)} vehicles found. Survey area: {self.survey_area}")

        # Assign areas to vehicles using allocation algorithm
        vehicle_assignments = AllocationControl.allocateArea(self.available_vehicles, self.survey_area)
        print("Vehicle Assignments:", vehicle_assignments)

        # Notify MOOS with the waypoint updates
        for name, assignment in vehicle_assignments.items():
            wpt_var = f"{name}_WPT_UPDATE"
            print(f"SENDING {assignment.string()} to {wpt_var}")
            self.notify(wpt_var, assignment.string())
